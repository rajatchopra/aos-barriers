Dear Colleague,

As you may already know, I am overseeing the development of a new
parallel programming library for distributed machines called gtmpi.
I asked one of my developers to implement several barrier
synchronization and run some experiments to help us decide which to
adopt.  The results were a little surprising to me, and I was hoping
that I could get your to share your thoughts on them.

In summary, we compared the algorithms presented in the famous
Mellor-Crummey Scott paper by measuring how long it took for a given
number of threads to cross 10^6 barriers. All experiments were run on
a dedicated cluster with one process assigned to each node. 

Details individual nodes are attached along with the data from the experiments.

Looking forward to your insight!



Hello!

I looked at the data and I was very curious about the unwarranted jump observed in the graph when number of nodes go from 12 to 13. Since the network specs seem to be flat, I am wondering if the developers were using VMs on your killerbee system itself?
The killerbee system has two sockets with 12 processors on each, which means there is a clear latency jump when 13 processors are in play. (Look at the siblings field in the cpuinfo data which indicates the interconnect structure). The tournament algorithm does not indicate the performance drop across sockets because that algorithm affords more parallelism (sync happens in pairs, rather than groups). This also explains why counter algorithm works so splendidly when number of nodes are within the same socket.
With an unpredictable structure of interconnects/network, I have no doubt that the tournament algorithm will show consistent scalability trend.

Thanks for sharing the findings. Best of luck.
Rajat // rchopra33
