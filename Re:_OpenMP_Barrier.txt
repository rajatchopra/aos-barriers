Dear Colleague,

As you may already know, I am overseeing the development of a new
parallel programming library for shared memory machines called gtmp.
I asked one of my developers to implement several barrier
synchronization and run some experiments to help us decide which to
adopt.  The results were a little surprising to me, and I was hoping
that I could get your to share your thoughts on them.

In summary, we compared the algorithms presented in the famous
Mellor-Crummey Scott paper by measuring how long it took for a given
number of threads to cross 10^6 barriers. All experiments were run on
a dedicated machine with 24 cores total. Details on the machine are
attached along with the data from the experiments.

Looking forward to your insight!



Hello!

I looked at the data and it is clear that the counter algorithm is behaving much better than the rest. I must say though that the trend should not be mistaken as an indication of further scalability - primarily because the number of threads is not quite enough for the machine's spec. Out of 144 (24*6) parallel threads that the machine can easily accommodate, running 24 threads is possibly low on sampling size.
Second thing that I wanted to point out: the tree algorithm does not seem to be in line with the expectations. It seems as if cache-line invalidation is happening resulting in false sharing.
With larger number of threads, and fixes on cache line alignment, I am certain that all algorithms will fall in line, with the likelyhood of counter valgorithm deterioting once NUMA crossings across threads begin to happen.

Keep me posted.
Cheers.
rchopra33
